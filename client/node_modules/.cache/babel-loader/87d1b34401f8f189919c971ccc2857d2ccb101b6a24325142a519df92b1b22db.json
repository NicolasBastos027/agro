{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adm\\\\Desktop\\\\Techfield\\\\client\\\\src\\\\App.js\";\nimport React, { Component } from \"react\"; //! Biblioteca do react a ser instalada com o pacote de \"Component\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Register from './pages/Register';\n\n//! Basicamente a função abaixo se trata de classificar o \"App\" como uma extensão de que o \"Component\" faz;\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      resposta: \"\",\n      teste: \"\"\n    };\n    //! No estado [ state ] atual em que se encontra as atualizações do projeto ele vai manter uma resposta, essa no qual será logo após definida pela conexão com a API;\n    this.chamadaAPI = async () => {\n      let resposta = await fetch(\"/api\");\n      let body = await resposta.json();\n      if (resposta.status !== 200) {\n        throw Error(\"Erro no status da Api :(\");\n      }\n      ;\n      return body;\n    };\n    //! A conexão com a API em si pelo uso assíncrono do fetch na rota \"/api\" [ futuramente será bem alterado essa parte ] e retornando as respostas [ mensagens vindas delas no \"res\" ] como JSON;\n    this.chamadaCadastro = async () => {\n      let resposta = await fetch(\"/cadastro\");\n      let body = await resposta.json();\n    };\n  }\n  componentDidMount() {\n    this.chamadaAPI().then(res => {\n      this.setState({\n        resposta: res.mensagem,\n        teste: res.teste\n      });\n    }).catch(err => console.error(\"Erro da chamada de API:\", err));\n  }\n  //! Ativando a cada instância do projeto a chamada pela API [ chamadaAPI ] e transformando a resposta na mensagem que vem de API [ res.mensagem ];\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"Api_mensagem\",\n        children: this.state.resposta\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"Api-teste\",\n        children: this.state.teste\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Register, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 8\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this);\n  }\n}\n;\nexport default App;","map":{"version":3,"names":["React","Component","logo","Register","jsxDEV","_jsxDEV","App","constructor","args","state","resposta","teste","chamadaAPI","fetch","body","json","status","Error","chamadaCadastro","componentDidMount","then","res","setState","mensagem","catch","err","console","error","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/adm/Desktop/Techfield/client/src/App.js"],"sourcesContent":["import React, {Component} from \"react\"; //! Biblioteca do react a ser instalada com o pacote de \"Component\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport Register from './pages/Register'\r\n\r\n//! Basicamente a função abaixo se trata de classificar o \"App\" como uma extensão de que o \"Component\" faz;\r\nclass App extends Component {\r\n  state = {\r\n    resposta: \"\",\r\n    teste: \"\"\r\n  }; //! No estado [ state ] atual em que se encontra as atualizações do projeto ele vai manter uma resposta, essa no qual será logo após definida pela conexão com a API;\r\n\r\n  chamadaAPI = async () => {\r\n    let resposta = await fetch(\"/api\");\r\n    let body = await resposta.json();\r\n\r\n    if (resposta.status !== 200) {\r\n      throw Error(\"Erro no status da Api :(\");\r\n    };\r\n\r\n    return body;\r\n  }; //! A conexão com a API em si pelo uso assíncrono do fetch na rota \"/api\" [ futuramente será bem alterado essa parte ] e retornando as respostas [ mensagens vindas delas no \"res\" ] como JSON;\r\n\r\n  chamadaCadastro = async () => {\r\n    let resposta = await fetch(\"/cadastro\");\r\n    let body = await resposta.json();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.chamadaAPI()\r\n      .then(res => {\r\n        this.setState({ \r\n        resposta: res.mensagem,\r\n        teste: res.teste });\r\n      })\r\n      .catch(err => console.error(\"Erro da chamada de API:\", err));\r\n  }; //! Ativando a cada instância do projeto a chamada pela API [ chamadaAPI ] e transformando a resposta na mensagem que vem de API [ res.mensagem ];\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <p className=\"Api_mensagem\">{this.state.resposta}</p>\r\n        <p className=\"Api-teste\">{this.state.teste}</p>\r\n       <Register />\r\n      </div>\r\n    );\r\n  };\r\n};\r\n\r\nexport default App;"],"mappings":";AAAA,OAAOA,KAAK,IAAGC,SAAS,QAAO,OAAO,CAAC,CAAC;AACxC,OAAOC,IAAI,MAAM,YAAY;AAC7B,OAAO,WAAW;AAClB,OAAOC,QAAQ,MAAM,kBAAkB;;AAEvC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,GAAG,SAASL,SAAS,CAAC;EAAAM,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAAA,KAC1BC,KAAK,GAAG;MACNC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE;IACT,CAAC;IAAE;IAAA,KAEHC,UAAU,GAAG,YAAY;MACvB,IAAIF,QAAQ,GAAG,MAAMG,KAAK,CAAC,MAAM,CAAC;MAClC,IAAIC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAEhC,IAAIL,QAAQ,CAACM,MAAM,KAAK,GAAG,EAAE;QAC3B,MAAMC,KAAK,CAAC,0BAA0B,CAAC;MACzC;MAAC;MAED,OAAOH,IAAI;IACb,CAAC;IAAE;IAAA,KAEHI,eAAe,GAAG,YAAY;MAC5B,IAAIR,QAAQ,GAAG,MAAMG,KAAK,CAAC,WAAW,CAAC;MACvC,IAAIC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAClC,CAAC;EAAA;EAEDI,iBAAiBA,CAAA,EAAG;IAClB,IAAI,CAACP,UAAU,CAAC,CAAC,CACdQ,IAAI,CAACC,GAAG,IAAI;MACX,IAAI,CAACC,QAAQ,CAAC;QACdZ,QAAQ,EAAEW,GAAG,CAACE,QAAQ;QACtBZ,KAAK,EAAEU,GAAG,CAACV;MAAM,CAAC,CAAC;IACrB,CAAC,CAAC,CACDa,KAAK,CAACC,GAAG,IAAIC,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEF,GAAG,CAAC,CAAC;EAChE;EAAG;;EAEHG,MAAMA,CAAA,EAAG;IACP,oBACEvB,OAAA;MAAKwB,SAAS,EAAC,KAAK;MAAAC,QAAA,gBAClBzB,OAAA;QAAGwB,SAAS,EAAC,cAAc;QAAAC,QAAA,EAAE,IAAI,CAACrB,KAAK,CAACC;MAAQ;QAAAqB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACrD7B,OAAA;QAAGwB,SAAS,EAAC,WAAW;QAAAC,QAAA,EAAE,IAAI,CAACrB,KAAK,CAACE;MAAK;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAChD7B,OAAA,CAACF,QAAQ;QAAA4B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC;EAEV;AACF;AAAC;AAED,eAAe5B,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}