{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adm\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\app\\\\client\\\\src\\\\App.js\";\nimport React, { Component } from \"react\"; //! Biblioteca do react a ser instalada com o pacote de \"Component\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Home from './pages/home';\n\n//! Basicamente a função abaixo se trata de classificar o \"App\" como uma extensão de que o \"Component\" faz;\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      resposta: \"\"\n    };\n    //! No estado [ state ] atual em que se encontra as atualizações do projeto ele vai manter uma resposta, essa no qual será logo após definida pela conexão com a API;\n    this.chamadaAPI = async () => {\n      const response = await fetch(\"/api\");\n      const body = await response.json();\n      if (response.status !== 200) {\n        throw Error(body.mensagem);\n      }\n      ;\n      console.log(body.mensagem);\n      return body;\n    };\n  }\n  //! A conexão com a API em si pelo uso assíncrono do fetch na rota \"/api\" [ futuramente será bem alterado essa parte ] e retornando as respostas [ mensagens vindas delas no \"res\" ] como JSON;\n\n  componentDidMount() {\n    this.chamadaAPI().then(res => {\n      console.log(\"Resposta da api -> \" + res.mensagem);\n      this.setState({\n        resposta: res.mensagem\n      });\n    }).catch(err => console.error(\"Erro da chamada de API:\", err));\n  }\n  //! Ativando a cada instância do projeto a chamada pela API [ chamadaAPI ] e transformando a resposta na mensagem que vem de API [ res.mensagem ];\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 8\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this);\n  }\n}\n;\nexport default App;","map":{"version":3,"names":["React","Component","logo","Home","jsxDEV","_jsxDEV","App","constructor","args","state","resposta","chamadaAPI","response","fetch","body","json","status","Error","mensagem","console","log","componentDidMount","then","res","setState","catch","err","error","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/adm/OneDrive/Área de Trabalho/app/client/src/App.js"],"sourcesContent":["import React, {Component} from \"react\"; //! Biblioteca do react a ser instalada com o pacote de \"Component\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport Home from './pages/home'\r\n\r\n//! Basicamente a função abaixo se trata de classificar o \"App\" como uma extensão de que o \"Component\" faz;\r\nclass App extends Component {\r\n  state = {\r\n    resposta: \"\"\r\n  }; //! No estado [ state ] atual em que se encontra as atualizações do projeto ele vai manter uma resposta, essa no qual será logo após definida pela conexão com a API;\r\n\r\n  chamadaAPI = async () => {\r\n    const response = await fetch(\"/api\");\r\n    const body = await response.json();\r\n\r\n    if (response.status !== 200) {\r\n      throw Error(body.mensagem);\r\n    };\r\n    console.log(body.mensagem);\r\n    return body;\r\n  }; //! A conexão com a API em si pelo uso assíncrono do fetch na rota \"/api\" [ futuramente será bem alterado essa parte ] e retornando as respostas [ mensagens vindas delas no \"res\" ] como JSON;\r\n\r\n  componentDidMount() {\r\n    this.chamadaAPI()\r\n      .then(res => {\r\n        console.log(\"Resposta da api -> \" + res.mensagem);\r\n        this.setState({ resposta: res.mensagem });\r\n      })\r\n      .catch(err => console.error(\"Erro da chamada de API:\", err));\r\n  }; //! Ativando a cada instância do projeto a chamada pela API [ chamadaAPI ] e transformando a resposta na mensagem que vem de API [ res.mensagem ];\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n       <Home />\r\n      </div>\r\n    );\r\n  };\r\n};\r\n\r\nexport default App;"],"mappings":";AAAA,OAAOA,KAAK,IAAGC,SAAS,QAAO,OAAO,CAAC,CAAC;AACxC,OAAOC,IAAI,MAAM,YAAY;AAC7B,OAAO,WAAW;AAClB,OAAOC,IAAI,MAAM,cAAc;;AAE/B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,GAAG,SAASL,SAAS,CAAC;EAAAM,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAAA,KAC1BC,KAAK,GAAG;MACNC,QAAQ,EAAE;IACZ,CAAC;IAAE;IAAA,KAEHC,UAAU,GAAG,YAAY;MACvB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,MAAM,CAAC;MACpC,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAElC,IAAIH,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;QAC3B,MAAMC,KAAK,CAACH,IAAI,CAACI,QAAQ,CAAC;MAC5B;MAAC;MACDC,OAAO,CAACC,GAAG,CAACN,IAAI,CAACI,QAAQ,CAAC;MAC1B,OAAOJ,IAAI;IACb,CAAC;EAAA;EAAE;;EAEHO,iBAAiBA,CAAA,EAAG;IAClB,IAAI,CAACV,UAAU,CAAC,CAAC,CACdW,IAAI,CAACC,GAAG,IAAI;MACXJ,OAAO,CAACC,GAAG,CAAC,qBAAqB,GAAGG,GAAG,CAACL,QAAQ,CAAC;MACjD,IAAI,CAACM,QAAQ,CAAC;QAAEd,QAAQ,EAAEa,GAAG,CAACL;MAAS,CAAC,CAAC;IAC3C,CAAC,CAAC,CACDO,KAAK,CAACC,GAAG,IAAIP,OAAO,CAACQ,KAAK,CAAC,yBAAyB,EAAED,GAAG,CAAC,CAAC;EAChE;EAAG;;EAEHE,MAAMA,CAAA,EAAG;IACP,oBACEvB,OAAA;MAAKwB,SAAS,EAAC,KAAK;MAAAC,QAAA,eACnBzB,OAAA,CAACF,IAAI;QAAA4B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC;EAEV;AACF;AAAC;AAED,eAAe5B,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}